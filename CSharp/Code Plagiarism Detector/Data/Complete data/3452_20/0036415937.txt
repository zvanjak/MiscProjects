class SortRazlPolje{
private:
	int _BrElem;
	int _MaxElem;
	int *_p;
	void InsertionSort (int *A, int N);
public:
	SortRazlPolje();
	int Dodaj(int broj); 
	int *VratiSortPolje(int &n); 
	~SortRazlPolje();
};

void SortRazlPolje::InsertionSort (int *A, int N) {
	int i, j;
	int pom;
	for (i = 1; i < N; i++) {
		pom = A[i];
		for (j = i; j >= 1 && A[j-1] > pom; j--)		
			A[j] = A[j-1];
		A[j] = pom;
	}
}

SortRazlPolje::SortRazlPolje(){
	_BrElem = 0;
	_MaxElem = 1; 
	_p = NULL;
}

int SortRazlPolje::Dodaj(int broj){
	int i;
	if(_p!=NULL && _BrElem != _MaxElem ){
		for(i=0; i<_BrElem; i++) if(*(_p+i) == broj) return 1;
		*(_p + _BrElem++) = broj;
		return 1;
	}
	int *pom = new int[_MaxElem * 2];
	if(pom == NULL) return 0;
	memcpy(pom, _p, _BrElem * sizeof(int));
	delete []_p;
	_MaxElem*=2;
	_p = pom;
	return this->Dodaj(broj); 
}

int *SortRazlPolje::VratiSortPolje(int &n){
	if (_BrElem == 0 && _p == NULL){n = 0; return NULL;}
	InsertionSort(_p, _BrElem);
	n = _BrElem;
	return _p;
}

SortRazlPolje::~SortRazlPolje(){
	delete []_p;
}