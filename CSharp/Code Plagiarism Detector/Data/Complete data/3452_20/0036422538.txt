class SortRazlPolje{
int _BrEl; 
int _MaxEl; 
int *_q;
void InsertionSort (int *A, int N);

public:
SortRazlPolje();
int Dodaj(int broj); 
int *VratiSortPolje(int &n); 
~SortRazlPolje();
};
void SortRazlPolje::InsertionSort (int *A, int N) {
int i, j;
int pom;
for (i = 1; i < N; i++) {
pom = A[i];
for (j = i; j >= 1 && A[j-1] > pom; j--)
A[j] = A[j-1];
A[j] = pom;
}
}
SortRazlPolje::SortRazlPolje(){
_BrEl = 0;
_MaxEl = 1; 
_q = NULL;
}
int SortRazlPolje::Dodaj(int broj){
int i;
if(_q!=NULL && _BrEl != _MaxEl ){
for(i=0; i<_BrEl; i++) if(*(_q+i) == broj) return 1;
*(_q + _BrEl++) = broj;
return 1;
}
int *pom = new int[_MaxEl * 2];
if(pom == NULL) return 0;
memcpy(pom, _q, _BrEl * sizeof(int));
delete []_q;
_MaxEl*=2;
_q = pom; 
return this->Dodaj(broj); 
}
int *SortRazlPolje::VratiSortPolje(int &n){
if (_BrEl == 0 && _q == NULL){n = 0; return NULL;}
InsertionSort(_q, _BrEl);
n = _BrEl;
return _q;
}
SortRazlPolje::~SortRazlPolje(){
delete []_q;
}
