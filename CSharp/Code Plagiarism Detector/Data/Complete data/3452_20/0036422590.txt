class SortRazlPolje {
private:
	int		*_Podaci;
	int		_BrojElem;						
	int		_MaxBrojElemenata;
	int		DodajElementNaKraj(int Vrijednost);
	void	ShellSort (int A [], int N);
	int PostaviNovuVelicinu(int NoviBrojElem);
	int PostaviElement(int Indeks, int Vrijednost);
public:
		SortRazlPolje ();
	int Dodaj (int Broj);
	int *VratiSortPolje(int &n);
		~SortRazlPolje ();
	void ispisi ();
};
SortRazlPolje::SortRazlPolje () {
	_BrojElem = 0;
	_MaxBrojElemenata = 10;
	_Podaci = new int[_MaxBrojElemenata];

}
SortRazlPolje::~SortRazlPolje () 
	{
	delete []_Podaci;
}
int SortRazlPolje::PostaviNovuVelicinu(int NoviBrojElem)
{
	// alociramo novi prostor
	int		*Temp = new int[NoviBrojElem];

	if (Temp==NULL)
		return 0;

	// prebacujemo elemente
	for( int i=0; i<_MaxBrojElemenata; i++ )
		Temp[i] = _Podaci[i];

	delete []_Podaci;
	
	_Podaci = Temp;
	
	if( _BrojElem > NoviBrojElem)			// znaèi da SMANJUJEMO polje
		_BrojElem = NoviBrojElem;

	_MaxBrojElemenata = NoviBrojElem;
	return 1;
}
int	SortRazlPolje::PostaviElement(int Indeks, int Vrijednost)
{
	if( 0 <= Indeks && Indeks < _MaxBrojElemenata )
	{
		_Podaci[Indeks] = Vrijednost;
		if( Indeks >= _BrojElem )			
		{
			// znaèi da smo stavili novi element izvan dosadašnje "granice" polja
			// ali unutar raspoloživog (alociranog) prostora
			_BrojElem = Indeks + 1;
		}
		return 1;
	}
	else
		return 0;
}
int SortRazlPolje::DodajElementNaKraj(int Vrijednost)
{
	// treba provjeriti da li ima mjesta za novi element
	int pom;
	pom=1;
	if( _BrojElem == _MaxBrojElemenata )
	{
		// znaèi da moramo alocirati dodatni prostor
		pom=PostaviNovuVelicinu(_BrojElem + 1);
	}

	if (pom) pom=PostaviElement(_BrojElem, Vrijednost);
	return pom;
}
int SortRazlPolje::Dodaj(int n) 
	{
	int i, pom=0;
	for (i=0;i<_BrojElem;i++) {
		if (_Podaci[i]==n) {
			pom=1;
			break;
		}
	}
	if (!pom) {
		i=DodajElementNaKraj(n);
	}
	else i=1;
	return i;
}

void SortRazlPolje::ShellSort (int A [], int N) {
  int i, j, korak;
  int pom;
  for (korak = N / 2; korak > 0; korak /= 2) {
		//printf("\nkorak=%d\n", korak);
    // Insertion sort s veæim korakom
    for (i = korak; i < N; i++) {
			//printf("\ni=%d:", i);
      pom = A [i];
      for (j = i; j >= korak && A[j-korak] > pom; j -= korak) {
				//printf("%d:%d ", j, j-korak);
        A [j] = A [j - korak];
      }
      A [j] = pom;
    }
  }
}
int *SortRazlPolje::VratiSortPolje (int &n) {
	int *pok,i;
	if (_BrojElem==0) return NULL;
	pok=new int[_BrojElem];
	for (i=0;i<_BrojElem;i++) {
		*(pok+i)=*(_Podaci+i);
	}
	ShellSort(pok, _BrojElem);
	n=_BrojElem;
	return pok;
}
