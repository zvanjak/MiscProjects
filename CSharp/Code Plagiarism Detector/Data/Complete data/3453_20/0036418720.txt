class SortRazlPolje{
int _Be; 
int _M; 
int *_p;
void InsertionSort (int *A, int N);
public:
SortRazlPolje(); 
int Dodaj(int broj); 
int *VratiSortPolje(int &n); 
~SortRazlPolje();
};
void SortRazlPolje::InsertionSort (int *A, int N) {
int i, j;
int pom;
for (i = 1; i < N; i++) {
pom = A[i];
for (j = i; j >= 1 && A[j-1] < pom; j--)
A[j] = A[j-1];
A[j] = pom;
}
}
SortRazlPolje::SortRazlPolje(){
_Be = 0;
_M = 1; 
_p = NULL;
}

int SortRazlPolje::Dodaj(int broj){
int i;
if(_p!=NULL && _Be != _M ){
for(i=0; i<_Be; i++) if(*(_p+i) == broj) return 1;
*(_p + _Be++) = broj;
return 1;
}
int *pom = new int[_M * 2];
if(pom == NULL) return 0;
memcpy(pom, _p, _Be * sizeof(int));
delete []_p;
_M*=2;
_p = pom; 
return this->Dodaj(broj); 

}
int *SortRazlPolje::VratiSortPolje(int &n){
if (_Be == 0 && _p == NULL){n = 0; return NULL;}

InsertionSort(_p, _Be);
n = _Be;
return _p;
}
SortRazlPolje::~SortRazlPolje(){
delete []_p;
}
