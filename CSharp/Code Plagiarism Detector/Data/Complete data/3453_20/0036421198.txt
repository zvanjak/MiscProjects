class SortRazlPolje{
int _BrElem; 
int *_p;

void InsertionSort (int *A, int N);

public:
                    
SortRazlPolje(); 
int Dodaj(int broj); 
int *VratiSortPolje(int &n); 
~SortRazlPolje();
};
void SortRazlPolje::InsertionSort (int *A, int N) {
int i, j;
int pom;
for (i = 1; i < N; i++) {
pom = A[i];
for (j = i; j >= 1 && A[j-1] < pom; j--)
A[j] = A[j-1];
A[j] = pom;
}
}


SortRazlPolje::SortRazlPolje(){
_BrElem = 0;
_p = NULL;
}

int SortRazlPolje::Dodaj(int Broj){
    int i, j, *pom;
    for(i=0; i<_BrElem; i++) if (Broj==_p[i]) return 1; 
    pom=new int[_BrElem++];                             
    if (pom==NULL) return 0;                            
    for(i=0; i<_BrElem-1; i++) pom[i]=_p[i];            
    delete []_p;                                        
    _p=pom;                                             
    _p[_BrElem-1]=Broj;                                 
    return 1;                                           
}
int *SortRazlPolje::VratiSortPolje(int &n){
    if (_BrElem == 0){n = 0; return NULL;}
    
    InsertionSort(_p, _BrElem);
    n = _BrElem;
    return _p;
}

SortRazlPolje::~SortRazlPolje(){
                                delete []_p;
}
