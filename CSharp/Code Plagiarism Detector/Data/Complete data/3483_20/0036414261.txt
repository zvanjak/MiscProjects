#include <stdio.h>

struct Komprimiranje
{
	
	int	Inicijaliziraj(int inMaxBrojElem);
	void	Izbrisi();
	int	PostaviNovuVelicinu(int NoviBrojElem);

	int	PostaviElement(int Indeks, int Vrijednost);
	int	DodajElementNaKraj(int Vrijednost);

	int	DohvatiElement(int Indeks);
	int	DohvatiElement2(int Indeks, int *DohvVrijed);

	int	BrojElemenata();
	void	IspisiElemente();

	int	UkupnaSuma();
	int	UkupniBrojElemenata(int Vrijednost);

	// članske varijable
	int	*_Podaci;
	
	int	_BrojElem;		
	int	_MaxBrojElemenata;
};

int Komprimiranje::Inicijaliziraj(int inMaxBrojElem)
{
	// implicitno korištenje this
	_BrojElem = 0;
	_MaxBrojElemenata = inMaxBrojElem;

	// ili eksplicitno
	this->_BrojElem = 0;
	this->_MaxBrojElemenata = inMaxBrojElem;

	_Podaci = (int *) malloc(_MaxBrojElemenata * sizeof(int));

	if( _Podaci == NULL )
		return 1;
	else
		return 0;
}
void Komprimiranje::Izbrisi()
{
	free(_Podaci);
}
int Komprimiranje::PostaviNovuVelicinu(int NoviBrojElem)
{
	_Podaci = (int *) realloc(_Podaci, NoviBrojElem * sizeof(int));
	
	if( _BrojElem > NoviBrojElem)			
		_BrojElem = NoviBrojElem;

	_MaxBrojElemenata = NoviBrojElem;

	if( _Podaci == NULL )
		return 1;
	else
		return 0;
}

int Komprimiranje::PostaviElement(int Indeks, int Vrijednost)
{
	if( 0 <= Indeks && Indeks < _MaxBrojElemenata )
	{
		_Podaci[Indeks] = Vrijednost;
		if( Indeks >= _BrojElem )			
		{
			 
			
			_BrojElem = Indeks + 1;

			
		}
		return 0;
	}
	else
		return 2;
}
int Komprimiranje::DodajElementNaKraj(int Vrijednost)
{
	int		ret = 0;
	
	if( _BrojElem == _MaxBrojElemenata )
	{
		
		ret = PostaviNovuVelicinu(_BrojElem + 1);
		
		if( ret != 0 )			
			return ret;
	}


	PostaviElement(_BrojElem, Vrijednost);

	
	 _Podaci[_BrojElem++] = Vrijednost;


	return 0;
}

int Komprimiranje::DohvatiElement(int Indeks)
{
	if( 0 <= Indeks && Indeks < _MaxBrojElemenata )
		return _Podaci[Indeks];
	else
		return 0;			
}
int Komprimiranje::DohvatiElement2(int Indeks, int *DohvVrijed)
{
	if( 0 <= Indeks && Indeks < _MaxBrojElemenata )
	{
		*DohvVrijed = _Podaci[Indeks];
		return 0;
	}
	else
		return 3;
}

int Komprimiranje::BrojElemenata()
{
	return _BrojElem;
}
void Komprimiranje::IspisiElemente()
{
	for( int i=0; i<BrojElemenata(); i++ )
		printf("%d\n", DohvatiElement(i));
}
int	Komprimiranje::UkupnaSuma()
{
	int a=0;
	for( int i=0; i<BrojElemenata(); i++ ){
		if i mod 2 = 0 {
			a=a+_Podaci[i];
		} else {
			for( int j=1; j<_Podaci[i]; j++ ){
				a=a+_Podaci[i];
			}
		}
	}
	return a;
}
int	Komprimiranje::UkupniBrojElemenata(int vrijednost)
{
	int a=0;
	for( int i=0; i<BrojElemenata(); i++ ){
		if (_Podaci[i]!=vrijednost) {
			a=a+1;
		}
	}
	return a;
}

