typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct n {
        tip element;
        struct n *sljed;
} atom;


int brojElementa(atom *glava){
	atom *pom;
	int br=0;	
	for(pom=glava; pom!=NULL; pom=pom->sljed)
		br++;
	return br;
}

int dodaj(atom **glavap, tip element){
  atom *novi;
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
		return 0;
  strcpy((novi->element).ime, element.ime);
  strcpy((novi->element).prezime, element.prezime);
  strcpy((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;

  novi->sljed = *glavap;
  *glavap = novi;
  return 1;
}

int minOcjena(atom *glava){
	atom *pom;
	int min;
	if (glava==NULL) 
		return -1;
	min=(glava->element).ocjena;
        for (pom=glava; pom!=NULL; pom=pom->sljed){
            if ((pom->element).ocjena < min)
                min=(pom->element).ocjena;
		}
    return min;
}

float prosjOcjena(atom *glava){
	atom *pom;
	int zbroj=0, br=0;   
    if (glava==NULL) return -1;
	for (pom=glava; pom!=NULL; pom=pom->sljed){
			zbroj+=(pom->element).ocjena;
			br++;
	}
	return ((float)zbroj/br);  
}

int izbaciImeSadrzi(atom **glavap, char *imePodniz){
	atom *pom, *ppom;
	int br=0;
	for (pom = *glavap; pom != NULL; ) { 
     if (strstr ((pom->element).ime, imePodniz)) {         
         if (pom == *glavap) {
             ppom = (*glavap)->sljed;
             free (*glavap);
		     *glavap = ppom;
		     pom = ppom;
		     br++;
		 }        
         else {		   
             for (ppom = *glavap; (ppom->sljed) != pom; ppom = ppom->sljed);
		     ppom->sljed = pom->sljed;
		     free (pom);
		     pom = ppom->sljed;
		     br++;
		 }
	 }
     else pom = pom->sljed;
	}
    return br;
}
	
