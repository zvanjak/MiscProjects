typedef struct {
      char ime[20+1];
      char prezime[30+1];
      char jmbag[10+1];
      int  ocjena;
} tip;

typedef struct s
{
        tip podaci;
        struct s *sljed;
}atom;

int brojElementa(atom *glava)
    {
        int br = 0;
        while(glava)
        {
          glava = glava->sljed;
          br++;
        }
        return br;
    }

int dodaj (atom **glavap, tip element) 
    {
        atom *p;
        if((p=(atom*)malloc(sizeof(atom))) == NULL ) return 0;
        p->sljed = *glavap;
        p->podaci = element;
        *glavap = p;
        return 1;
    }   

int minOcjena(atom *glava)
    {
        atom *p;
        int min;
        if( glava == NULL ) return -1;
        min = 6;
        p = glava;
        while( p != NULL )
        {
               if( p->podaci.ocjena < min )
               min = p->podaci.ocjena;
               p = p->sljed;
        }
        return min;
    }


float prosjOcjena(atom *glava)
    {
          atom *p;
          float suma = 0, brojac = 0, prosjek = 0;
          if( glava == NULL ) return -1;
          p = glava;
          while( p != NULL )
          {
                 suma = suma + p->podaci.ocjena;
                 brojac++;
                 p = p->sljed;
          }
          prosjek = (suma)/(brojac);
          return prosjek;
    }

 int izbaciImeSadrzi (atom **glavap, char *imePodniz)
    {
        atom *p, *pp;
        int num;
        for( p = *glavap; p != NULL; )
        {
           if( strstr( (p->podaci).ime, imePodniz) )
           {
               if( p == *glavap)
               {
                   pp = (*glavap)->sljed;
                   free(*glavap);
                   *glavap=pp;
                   p=pp;
                   num++;
               }
               else
               {
                   for(pp=*glavap; pp->sljed!=p;pp=p->sljed);
                   pp->sljed=p->sljed;
                   free(p);
                   p=pp->sljed;
                   num++;
               }      
           }
           else p = p->sljed;
        }
    }

