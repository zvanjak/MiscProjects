typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct n {
        tip element;
        struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
  atom *novi;
  
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  
  novi->sljed = *glavap;
  *glavap = novi;
  
  return 1;
}

int brojElementa (atom *glava)
{
  atom *p; 
  int br_el = 0;
  for (p = glava; p != NULL; p = p->sljed) br_el++;
  return br_el;
}

int minOcjena (atom *glava)
{
  atom *p; 
  int min;
  
  if (glava == NULL) return -1;
  
  min = (glava->element).ocjena;
  for (p = glava; p != NULL; p = p->sljed) 
      if ((p->element).ocjena < min) 
         min = (p->element).ocjena;
  
  return min;
}

float prosjOcjena (atom *glava)
{
  atom *p; 
  int zbroj = 0, br = 0;
  
  if (glava == NULL) return -1;
  
  for (p = glava; p != NULL; p = p->sljed) 
  {
      br++; 
      zbroj += (p->element).ocjena;
  }
  
  return ((float) zbroj / br);

}

int izbaciImeSadrzi (atom **glavap, char *imePodniz)
{
 atom *p, *pp; 
 int br = 0, i, j;
 
 for (p = *glavap; p != NULL; ) 
 {
   j = strlen ((p->element).ime) - strlen(imePodniz);
   for (i = 0; i <= j; i++)
   {
     if ((strncmp ((p->element).ime, imePodniz, strlen (imePodniz)) == 0) &&
         (strlen ((p->element).ime) >= strlen (imePodniz))) 
         {
         
         if (p == *glavap) 
         {
               pp = (*glavap)->sljed;
               free (*glavap);
               *glavap = pp;
               p = pp;
               br++;
         }        
         else 
         {   
             for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
             pp->sljed = p->sljed;
             free (p);
             p = pp->sljed;
             br++;
         }
     }
     
     else p = p->sljed;
   }
 }

 return br;
}