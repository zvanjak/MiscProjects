typedef struct {
      char ime[20+1];
      char prezime[30+1];
      char jmbag[10+1];
      int  ocjena;
} tip;

typedef struct at atom;
struct at {
        tip element;
        atom *sljed;
};

int brojElementa (atom *glava) {
  atom *p; int NumEle = 0;
  for (p = glava; p != NULL; p = p->sljed) NumEle++;
  return NumEle;
}

int dodaj (atom **glavap, tip element) {
        atom *novi;
       
        novi = (atom *) malloc (sizeof(atom));
        if (novi == NULL) return 0;
       
        novi->element = element;
        novi->sljed = *glavap;
        *glavap = novi;
       
        return 1;
}


int minOcjena(atom *glava) {
        int min;

        if (glava == NULL) return -1;
       
        min = (glava->element).ocjena;
        glava = glava->sljed;
        while (glava) {
                if (min > (glava->element).ocjena) {
                        min = (glava->element).ocjena;
                }
                glava = glava->sljed;
        }

        return min;
}

float prosjOcjena(atom *glava) {
        int zbrojOcjena = 0;
        int brojOcjena = 0;

        if (glava == NULL) return -1;

        while (glava) {
                zbrojOcjena += (glava->element).ocjena;
                brojOcjena++;
                glava = glava->sljed;
        }

        return (float) zbrojOcjena / brojOcjena;
}

int izbaciImeSadrzi (atom **glavap, char *imePodniz) {
        atom *pom;
        atom *prethodni;
        int izbacenih = 0;

        if (*glavap == NULL) return 0;
       
        pom = *glavap;
        prethodni = NULL;
        while (pom) {
                if (strstr((pom->element).ime, imePodniz)) {
                        if (pom == *glavap) {
                                *glavap = (*glavap)->sljed;
                                free(pom);
                                pom = *glavap;
                        } else {
                                prethodni->sljed = pom->sljed;
                                free(pom);
                                pom = prethodni;
                        }
                        izbacenih++;
                }
                prethodni = pom;
                pom = pom->sljed;
        }

        return izbacenih;
}

