typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;

typedef struct n {
tip element;
struct n *sljed;
} atom;


int dodaj (atom **glavap, tip element)   {
atom *novi;
if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
strcpy((novi->element).ime, element.ime);
strcpy((novi->element).prezime, element.prezime);
strcpy((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;
novi->sljed = *glavap;
*glavap = novi;
return 1;
}


int brojElementa (atom *glava)   {
atom *pom; int brojac = 0;
for (pom = glava; pom != NULL; pom = pom->sljed) brojac++;
return brojac;
}


int minOcjena (atom *glava)   {
atom *pom; int min;
if (glava == NULL) return -1;
min = (glava->element).ocjena;
for (pom = glava; pom != NULL; pom = pom->sljed)
if ((pom->element).ocjena < min) min = (pom->element).ocjena;
return min;
}


float prosjOcjena (atom *glava)   {
atom *pom; int zbroj = 0; int broji = 0;
if (glava == NULL) return -1;
for (pom = glava; pom != NULL; pom = pom->sljed) {
broji++; zbroj += (pom->element).ocjena;
}
return ((float) zbroj / broji);
}


int izbaciImeSadrzi (atom **glavap, char *imePodniz)  {
atom *pom, *ppa; int brojac = 0;
for (pom = *glavap; pom != NULL; ) {
if (strstr ((pom->element).ime, imePodniz)) {
if (pom == *glavap) {
ppa = (*glavap)->sljed;
free (*glavap);
*glavap = ppa;
pom = ppa;
brojac++;
  }
else {
for (ppa = *glavap; ppa->sljed != pom; ppa = ppa->sljed);
ppa->sljed = pom->sljed;
free (pom);
pom = ppa->sljed;
brojac++;
}
}
else pom = pom->sljed;
}
return brojac;
}