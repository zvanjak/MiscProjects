typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;
typedef struct a {
tip element;
struct a  *sljed;
} atom;

int brojElementa (atom *glava) {
atom *p; 
int n=0;
	for (p = glava; p != NULL; p = p->sljed) 
		n++;
return n;
}
int dodaj (atom **glavap, tip element){
atom *novi;
		if  ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
			return 0;
strcpy((novi->element).ime, element.ime);
strcpy((novi->element).prezime, element.prezime);
strcpy((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;
novi->sljed = *glavap;
*glavap = novi;
return 1;
}
int minOcjena (atom *glava) {
atom *p;
int min;
		if (glava == NULL) return  -1;
			min = (glava->element).ocjena;
				for (p = glava; p != NULL; p= p->sljed)
						if ((p->element).ocjena < min) 
							min= (p->element).ocjena;
								return min;
										}

float prosjOcjena (atom *glava) {
atom *p;
int ukupno = 0, br= 0;
float prosjek;
		if (glava == NULL) return -1;
			for (p = glava; p != NULL; p = p->sljed) {
				br++; 
ukupno=ukupno+ (p->element).ocjena;
}
prosjek=(float) ukupno/br;
return prosjek;
}

int izbaciImeSadrzi (atom **glavap, char *imePodniz) {
atom *p, *p1; 
int n = 0;
			for (p = *glavap; p != NULL; ) {
				if (strstr ((p->element).ime, imePodniz)) {
					if (p == *glavap) {
						p1 = (*glavap)->sljed;
							free (*glavap);
								*glavap = p1;
										p= p1;
											n++;
												}
			else {
				for (p1 = *glavap; p1->sljed != p; p1 = p1->sljed);
					p1->sljed = p->sljed;
						free (p);
							p = p1->sljed;
								n++;
							}
								}
			else p = p->sljed;
				}
return n;
}
















