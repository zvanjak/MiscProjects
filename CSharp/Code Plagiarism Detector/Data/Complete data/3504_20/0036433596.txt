typedef struct
{
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

typedef struct at
{
	tip elementi;
	struct at *sljed;
} atom;

int brojElementa(atom *glava)
{
	int broj_el=0;
	atom *p=glava;
	while(p != NULL)
	{
		broj_el++;
		p=p->sljed;
	}
	return broj_el;
}

int dodaj (atom **glavap, tip element)
{
	atom *novi;
	if( (novi = (atom *) malloc (sizeof (atom))) == NULL )
		return 0;
	strcpy(novi->elementi.ime, element.ime);
	strcpy(novi->elementi.prezime, element.prezime);
	strcpy(novi->elementi.jmbag, element.jmbag);
	novi->elementi.ocjena = element.ocjena;

	novi->sljed = *glavap;
	*glavap = novi;
	return 1;
}

int minOcjena(atom *glava)
{
	int minimalna;
	atom *p;
	if (glava == NULL)
		return -1;
	minimalna = glava->elementi.ocjena;
	for( p = glava; p != NULL; p = p->sljed)
		if( p->elementi.ocjena < minimalna )
			minimalna = p->elementi.ocjena;
	return minimalna;
}

float prosjOcjena(atom *glava)
{
	float suma=0;
	int n=0;
	atom *p;
	if (glava == NULL)
		return -1;
	for( p = glava; p != NULL; p = p->sljed)
	{
		n++;
		suma += p->elementi.ocjena;
	}
	return suma/(float)n;
}

int izbaciImeSadrzi (atom **glavap, char *imePodniz)
{
	int brojizbacenih=0;
	atom *p;

	while (*glavap)
	{
		if (strstr((*glavap)->elementi.ime, imePodniz))
		{
			p = *glavap;
			*glavap = (*glavap)->sljed;
			free(p);
			brojizbacenih++;
		}
		else
			glavap = &((*glavap)->sljed);
	}
	return brojizbacenih;
}