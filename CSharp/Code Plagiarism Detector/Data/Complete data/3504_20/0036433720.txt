typedef struct {
char ime[20+1];
char prezime[30+1];
char jmbag[10+1];
int ocjena;
} tip;

typedef struct struktura {
tip element;
struct struktura *sljed;
} atom;


int brojElementa (atom *glava){
atom *pa;
int brojel = 0;
for (pa = glava; pa != NULL; pa = pa->sljed)
brojel++;
return brojel;
}


int dodaj (atom **glavap, tip element){
atom *novi;
if ((novi = (atom *)malloc(sizeof(atom))) == NULL) return 0;
strcpy((novi->element).ime, element.ime);
strcpy((novi->element).prezime, element.prezime);
strcpy((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;
novi->sljed = *glavap;
*glavap = novi;
return 1;
}


int minOcjena (atom *glava){
atom *pa; int min;
if (glava == NULL) return -1;
min = (glava->element).ocjena;
for (pa = glava; pa != NULL; pa = pa->sljed)
if ((pa->element).ocjena < min)
min = (pa->element).ocjena;
return min;
}


float prosjOcjena (atom *glava){
atom *pa;
int suma = 0;
int broj = 0;
if (glava == NULL) return -1;
for (pa = glava; pa != NULL; pa = pa->sljed) {
broj++;
suma += (pa->element).ocjena;
}
return ((float) suma / broj);
}


int izbaciImeSadrzi (atom **glavap, char *imePodniz){
atom *pa, *ppa;
int ukupno = 0;
for (pa = *glavap; pa != NULL; ) {
if (strstr ((pa->element).ime, imePodniz)) {
if (pa == *glavap) {
ppa = (*glavap)->sljed;
free (*glavap);
*glavap = ppa;
pa = ppa;
ukupno++;
}
else {
for (ppa = *glavap; ppa->sljed != pa; ppa = ppa->sljed);
ppa->sljed = pa->sljed;
free (pa);
pa = ppa->sljed;
ukupno++;
}
}
else pa = pa->sljed;
}
return ukupno;
}

