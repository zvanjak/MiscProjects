typedef struct {
  char ime [20+1];
  char prezime [30+1];
  char jmbag [10+1];
  int ocjena;
} tip;
  
typedef struct n {
  tip element;
  struct n *sljed;
} atom;
  
int dodaj (atom **glavap, tip element) {

  atom *novi;
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;

  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);

  (novi->element).ocjena = element.ocjena;
  novi->sljed = *glavap;
  *glavap = novi;
  return 1;
}
  
int brojElementa (atom *glava) {

  atom *p; int brojelem = 0;
  for (p = glava; p != NULL; p = p->sljed) brojelem++;
  return brojelem;
}
  
int minOcjena (atom *glava) {

  atom *p; int minimum;
  if (glava == NULL) return -1;
  minimum = (glava->element).ocjena;
  for (p = glava; p != NULL; p = p->sljed)
  if ((p->element).ocjena < minimum) minimum = (p->element).ocjena;
  return minimum;
}
  
float prosjOcjena (atom *glava) {

  atom *p; int zbroj = 0; int broj = 0;
  if (glava == NULL) return -1;
  for (p = glava; p != NULL; p = p->sljed) {
  	broj++; 
	zbroj += (p->element).ocjena;
  }
  return ((float) zbroj / broj);
}
   
int izbaciPrezimeSadrzi (atom **glavap, char * prezimePodniz) {

     atom *p, *pp; int broj = 0;
     for (p = *glavap; p != NULL; ) {
         if (strstr ((p->element).prezime, prezimePodniz)!=NULL) {
             if (p == *glavap) {
                 pp = (*glavap)->sljed;
                 free (*glavap);
                 *glavap = pp;
                 p = pp;
                 broj++;
		}
             else {
                 for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
                 pp->sljed = p->sljed;
                 free (p);
                 p = pp->sljed;
                 broj++;
                 }
             }
         else p = p->sljed;
         }
     return broj;
}