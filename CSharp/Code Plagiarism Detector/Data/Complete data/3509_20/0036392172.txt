 typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;

typedef struct n {
tip element;
struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
atom *novi;

if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;

strcpy ((novi->element).ime, element.ime);
strcpy ((novi->element).prezime, element.prezime);
strcpy ((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;

novi->sljed = *glavap;
*glavap = novi;

return 1;
}

int brojElementa (atom *glava)
{
atom *p; int NEle = 0;
for (p = glava; p != NULL; p = p->sljed) NEle++;

return NEle;
}

int minOcjena (atom *glava)
{
atom *p; int min;

if (glava == NULL) return -1;

min = (glava->element).ocjena;
for (p = glava; p != NULL; p = p->sljed)
if ((p->element).ocjena < min) min = (p->element).ocjena;

return min;
}

float prosjOcjena (atom *glava)
{
atom *p; int zbr = 0; int n = 0;

if (glava == NULL) return -1;

for (p = glava; p != NULL; p = p->sljed) {
n++; zbr += (p->element).ocjena;
}

return ((float) zbr / n);

}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz)
{
atom *p, *pp; int n = 0;

for (p = *glavap; p != NULL; ) {

if (strstr ((p->element).prezime, prezimePodniz)) {

if (p == *glavap) {
pp = (*glavap)->sljed;
free (*glavap);
*glavap = pp;
p = pp;
n++;
}

else {
for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
pp->sljed = p->sljed;
free (p);
p = pp->sljed;
n++;
}
}

else p = p->sljed;
}

return n;
}