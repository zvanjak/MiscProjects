typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

typedef struct at {
	struct at *sljed;
	tip element;
} atom;


int dodaj(atom **glavap, tip element) {
	atom *novi;
	if(novi=(atom*)malloc(sizeof(atom))) {
		
		strcpy((novi->element).ime,element.ime);
		strcpy((novi->element).prezime,element.prezime);
		strcpy((novi->element).jmbag,element.jmbag);
		(novi->element).ocjena=element.ocjena;
		
		
		novi->sljed = *glavap;
		*glavap = novi;
		return 1;
	
		}
	else
		return 0;
}

int brojElementa(atom *glava) {
	atom *p=glava; 
	int br=0;
	while(p!=NULL) {
		br++;
		p=p->sljed;
	};
	return br;
}


int minOcjena(atom *glava) {
	atom *p;
	int min;
	if(glava==NULL)
		return -1;
	min=(glava->element).ocjena;
	p=glava;	
	p=p->sljed;
	while(p!=NULL) {
		if((p->element).ocjena < min) {
			min=(p->element).ocjena;
		}
			p=p->sljed;
	};
	return min;
}



float prosjOcjena(atom *glava) {
	atom *p=glava;
	int suma=0;
	int br=0;
	if(p==NULL) return -1;
	else {
		while(p!=NULL) {
			suma += (p->element).ocjena;
			br++;
			p=p->sljed;
		};
		return ((float)suma/br);
	}
}


int izbaciPrezimeSadrzi(atom **glavap, char *prezimePodniz) {
	atom *p=*glavap, *r;
	int br=0;
	if(p==NULL) return 0;
	for (p = *glavap; p != NULL; ) {
		if(strstr(p->element.prezime, prezimePodniz)!=NULL) {
			if(p==*glavap){
				r=(*glavap)->sljed;
				free(*glavap);
				*glavap=r;
				p=r;
				br++;
			}
			else {
				for (r = *glavap; r->sljed != p; r = r->sljed);
				r->sljed=p->sljed;
				free(p);
				p=r->sljed;
				br++;
				}
			}

			else p=p->sljed;
	}

	return br;
}
			
