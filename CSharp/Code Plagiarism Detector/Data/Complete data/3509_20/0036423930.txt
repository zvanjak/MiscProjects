typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct a {
        tip element;
        struct a *sljed;
} atom;

int dodaj (atom **glavap, tip element) {
    atom *novi;
  
    novi = (atom *) malloc(sizeof(atom));

    if (novi == NULL) return 0;
  
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  
    novi->sljed = *glavap;
    *glavap = novi;
  
    return 1;
}


int brojElementa (atom *glava) {
    atom *pom;
    int brelem;
    brelem = 0;

    for (pom = glava; pom != NULL; pom = pom->sljed){
        brelem++;
    }

    return brelem;
}


int minOcjena (atom *glava) {
    atom *pom;
    int min;
  
    if (glava == NULL) return -1;
  
    min = (glava->element).ocjena;
    for (pom = glava; pom != NULL; pom = pom->sljed) {
        if (((pom->element).ocjena) < min) {
           min = (pom->element).ocjena;
        }
    }

    return min;
}


float prosjOcjena (atom *glava) {
      atom *pom;
      int zbroj = 0;
      int num = 0;
  
      if (glava == NULL) return -1;
  
      for (pom = glava; pom != NULL; pom = pom->sljed) {
          num++;
          zbroj += (pom->element).ocjena;
      }
  
  return ((float) zbroj / num);

}


int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz) {
    atom *t, *temp;
    int br = 0;
 
    for (t = *glavap; t != NULL; ) {
 
        if (strstr((t->element).prezime, prezimePodniz)) {
           if (t == *glavap) {
              temp = (*glavap)->sljed;
              free (*glavap);
              *glavap = temp;
              t = temp;
              br++;
           } else {
             for (temp = *glavap; temp->sljed != t; temp = temp->sljed);
                 temp->sljed = t->sljed;
             free (t);
             t = temp->sljed;
             br++;
          }
        } else t = t->sljed;
    }

 return br;
} 
