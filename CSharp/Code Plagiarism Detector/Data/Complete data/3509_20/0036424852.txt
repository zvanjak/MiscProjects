typedef struct {
        char ime[20+1];
        char prezime[30+1];
        char jmbag[10+1];
        int ocjena;
} tip;

struct at {
  tip element;
  struct at *sljed; 
};

typedef struct at atom;

int brojElementa(atom *glava)
{
  atom *p;
  int i=0;
  for (p = glava; p != NULL; p = p->sljed)
      i++;
  return i;
} 

int prosjOcjena(atom *glava)
{
    atom *p;
    float prosj=0;
    int i=0;
    if(glava == NULL) return -1;
    
    for (p = glava; p != NULL; p = p->sljed)
    {
        prosj+=p->element.ocjena;
        i++;
    }
    prosj/=(float)i;
    return prosj;
}

int minOcjena(atom *glava)
{
    atom *p;
    int min;

    if(glava == NULL) return -1;
    min=glava->element.ocjena;
    
    for (p = glava->sljed; p != NULL; p = p->sljed)
    {
        if(min > p->element.ocjena)
            min=p->element.ocjena;
    }

    return min;
}

int dodaj (atom **glavap, tip element)
{
    atom *novi, *p;
    if ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
  		return 0;
    novi->element = element;
    novi->sljed = *glavap;
    *glavap = novi;
    return 1;
}

int izbaciPrezimeSadrzi(atom **glavap, char *prezimePodniz)
{
    atom *p, *pp;
    
    int i=0;
    for (p = *glavap; p != NULL; p = p->sljed)
    {
        if (strstr(p->element.prezime,prezimePodniz) != NULL)
        {
             i++;
             if (p == *glavap)
             {
		         pp = (*glavap)->sljed;
		         free (*glavap);
		         *glavap = pp;
             }
             else
             {
             	 for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
           		 pp->sljed = p->sljed;
              	 free (p);
             }
        }
    }
    return i;
}