typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;
struct at {
	tip podaci;
	struct at *sljed;
};
typedef struct at atom;
int brojElementa(atom *glava) {
	int n;
	if(glava==NULL) return 0; else n=1;
	while((glava=glava->sljed)!=NULL) n++;
	return n;
}
int dodaj(atom **glavap, tip element) {
	atom *novi;
	if((novi=(atom *) malloc(sizeof(atom)))==NULL) return 0;
	novi->podaci=element;
	novi->sljed=*glavap;
	*glavap=novi;
	return 1;
}
int minOcjena(atom *glava) {
	int min;
	if(glava==NULL) return -1;
	min=glava->podaci.ocjena;
	while((glava=glava->sljed)!=NULL)
		if (min > glava->podaci.ocjena) min=glava->podaci.ocjena;
	return min;
}
float prosjOcjena(atom *glava) {
	int suma,n;
	if(glava==NULL) return -1;
	suma=glava->podaci.ocjena;
	n=1;
	while((glava=glava->sljed)!=NULL){
		suma+=glava->podaci.ocjena;
		n++;
	}
	return ((float)suma)/n;
}
int izbaciPrezimeSadrzi(atom **glavap, char *prezimePodniz) {
	atom *stari, *p;
	int n=0;
	while(strstr((*glavap)->podaci.prezime, prezimePodniz)!=NULL) {
		stari=*glavap;
		*glavap=(*glavap)->sljed;
		free(stari);
		n++;
	}
	p = *glavap;
	do {
		if(strstr((p->sljed)->podaci.prezime, prezimePodniz)!=NULL) {
			stari=p->sljed;
			p->sljed=stari->sljed;
			free(stari);
			n++;
		}
	} while((p=p->sljed)!=NULL);
	return n;
}