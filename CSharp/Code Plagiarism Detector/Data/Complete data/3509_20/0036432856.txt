typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;
	
typedef struct n {
tip element;
struct n *sljed;
} atom;

int brojElementa (atom *glava) {
	int broj=0;

	for(; glava!=NULL; glava=glava->sljed, broj++);

	return broj;
}

int dodaj (atom **glavap, tip element){
	atom *novi;

	if(novi=(atom *) malloc (sizeof(atom))){
		strcpy((novi->element).ime, element.ime);
		strcpy((novi->element).prezime, element.prezime);
		strcpy((novi->element).jmbag, element.jmbag);
		(novi->element).ocjena = element.ocjena;

		novi->sljed = *glavap;
		*glavap = novi;

		return 1;
	}
	else return 0;
}

int minOcjena(atom *glava) {
int min;
	if (glava == NULL) return -1;
        
	else {
                min=(glava->element).ocjena;
		for(glava=glava->sljed; glava != NULL; glava=glava->sljed){
			if((glava->element).ocjena < min)
				min=(glava->element).ocjena;
		}
	return min;
	}
}

float prosjOcjena(atom *glava){
	int broj=0;
	int suma=0;

	if (glava == NULL) return -1;

	else {
		for(; glava != NULL; glava=glava->sljed){
			suma+= (glava->element).ocjena;
			broj++;
		}
	}
		return ((float)suma/broj);
	
}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz){

	atom *pa, *ppa; int broj = 0;
	for (pa = *glavap; pa != NULL; ) {
	
		if (strstr ((pa->element).prezime, prezimePodniz)) {
				if (pa == *glavap) {
				ppa = (*glavap)->sljed;
				free (*glavap);
				*glavap = ppa;
				pa = ppa;
				broj++;
				}
	
				else {
					for (ppa = *glavap; ppa->sljed != pa; ppa = ppa->sljed);
					ppa->sljed = pa->sljed;
					free (pa);
					pa = ppa->sljed;
					broj++;
				}
		}
		else pa = pa->sljed;
	}
return broj;
}