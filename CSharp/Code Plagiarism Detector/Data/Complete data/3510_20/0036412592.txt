typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;

typedef struct n {
tip element;
struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
atom *novi;
if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
strcpy ((novi->element).ime, element.ime);
strcpy ((novi->element).prezime, element.prezime);
strcpy ((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;
novi->sljed = *glavap;
*glavap = novi;
return 1;
}



int brojElementa (atom *glava)
{
atom *p; int NumEle = 0;
for (p = glava; p != NULL; p = p->sljed) NumEle++;
return NumEle;
}



int maksOcjena (atom *glava)
{
atom *p; int maks;
if (glava == NULL) return -1;
maks = (glava->element).ocjena;
for (p = glava; p != NULL; p = p->sljed)
if ((p->element).ocjena > maks) maks = (p->element).ocjena;
return maks;
}



float prosjOcjena (atom *glava)
{
atom *p; int zbroj = 0; int num = 0;
if (glava == NULL) return -1;
for (p = glava; p != NULL; p = p->sljed) {
num++; zbroj += (p->element).ocjena;
}
return ((float) zbroj / num);
}




int izbaciImePocinjeS (atom **glavap, char *imePocetak)
{
atom *pa, *ppa; int numer = 0;
for (pa = *glavap; pa != NULL; ) {
if (strstr ((pa->element).ime, imePocetak)==(pa->element).ime) {
if (pa == *glavap) {
ppa = (*glavap)->sljed;
free (*glavap);
*glavap = ppa;
pa = ppa;
numer++;
}
else {
for (ppa = *glavap; ppa->sljed != pa; ppa = ppa->sljed);
ppa->sljed = pa->sljed;
free (pa);
pa = ppa->sljed;
numer++;
}
}
else pa = pa->sljed;
}
return numer;
}