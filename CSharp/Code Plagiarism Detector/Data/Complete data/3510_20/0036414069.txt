typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct n {
        tip element;
        struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
  atom *novi;
  
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  
  novi->sljed = *glavap;
  *glavap = novi;
  
  return 1;
}

int brojElementa (atom *glava)
{
  atom *p; int BrEl = 0;
  for (p = glava; p != NULL; p = p->sljed) BrEl++;
  
  return BrEl;
}

int maksOcjena (atom *glava)
{
  atom *p; int MaxO;
  
  if (glava == NULL) return -1;
  
  MaxO = (glava->element).ocjena;
  for (p = glava; p != NULL; p = p->sljed) 
      if ((p->element).ocjena > MaxO) MaxO = (p->element).ocjena;
  
  return MaxO;
}

float prosjOcjena (atom *glava)
{
  atom *p; int suma = 0; int brojac = 0;
  
  if (glava == NULL) return -1;
  
  for (p = glava; p != NULL; p = p->sljed) {
      brojac++; suma += (p->element).ocjena;
  }
  
  return ((float) suma / brojac);

}

int izbaciImePocinjeS (atom **glavap, char *imePocetak)
{
 atom *p, *pp; int kol = 0;
 
 for (p = *glavap; p != NULL; ) {
 
     if ((strncmp ((p->element).ime, imePocetak, strlen (imePocetak)) == 0) &&
         (strlen ((p->element).ime) >= strlen (imePocetak))) {
         
         if (p == *glavap) {
               pp = (*glavap)->sljed;
               free (*glavap);
		       *glavap = pp;
		       p = pp;
		       kol++;
         }
         
          else {		   
		       for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
		       pp->sljed = p->sljed;
		       free (p);
		       p = pp->sljed;
		       kol++;
          }
     }
     
     else p = p->sljed;
 }

 return kol;
} 