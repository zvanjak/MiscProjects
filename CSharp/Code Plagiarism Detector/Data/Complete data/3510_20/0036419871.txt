typedef struct
{
	char ime[20 + 1];
	char prezime[30 + 1];
	char jmbag[10 + 1];
	int ocjena;
} tip;

struct a
{
	tip element;
	struct a *sljed;
};

typedef struct a atom;

int brojElementa(atom *glava)
{
	int br = 0;
	atom *p = glava;

	while(p != NULL)
	{
		br++;
		p = p->sljed;
	}
	return(br);
}

int dodaj(atom **glavap, tip element)
{
	atom *novi;
	if(!(novi = (atom*)malloc(sizeof(atom)))) return(0);
	novi->element = element;
	novi->sljed = *glavap;
	*glavap = novi;
	return(1);
}

int maksOcjena(atom *glava)
{
	int max;
	atom *p = glava;
	if(!glava) return(-1);
	max = glava->element.ocjena;
	while(p != NULL)
	{
		if(p->element.ocjena > max) max = p->element.ocjena;
		p = p->sljed;
	}
	return(max);
}

float prosjOcjena(atom *glava)
{
	float prosjek = 0; 
	atom *p = glava;
	if(!glava) return(-1);
	while(p != NULL)
	{
		prosjek += p->element.ocjena;
		p = p->sljed;
	}
	return(prosjek / brojElementa(glava));
}

int izbaciImePocinjeS(atom **glavap, char *imePocetak)
{
	int brel = 0;
	atom *p = *glavap;
	atom *tmp;
	while(p != NULL)
	{
		if(p->element.ime == strstr(p->element.ime, imePocetak))
		{
			if(p == *glavap)
			{
				*glavap = p->sljed;
				free(p);
				p = (*glavap)->sljed;
			}
			else
			{
				tmp = *glavap;
				while(tmp->sljed != p)
					tmp = tmp->sljed;
				tmp->sljed = p->sljed;
				free(p);
				p = tmp;
			}
			brel++;
		}
		p = p->sljed;
	}
	return(brel);
}