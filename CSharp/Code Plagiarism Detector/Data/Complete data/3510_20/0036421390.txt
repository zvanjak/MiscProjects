typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct at {
        tip element;
        struct at *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
  atom *novi;
  
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  
  novi->sljed = *glavap;
  *glavap = novi;
  
  return 1;
}

int brojElementa (atom *glava)
{
  atom *a; 
  int brojelemenata = 0;
  for (a = glava; a != NULL; a = a->sljed) 
	  brojelemenata++;
  return brojelemenata;
}

int maksOcjena (atom *glava)
{
  atom *a; 
  int max;
  
  if (glava == NULL) return -1;
  
  max = (glava->element).ocjena;
  for (a = glava; a != NULL; a = a->sljed) 
      if ((a->element).ocjena > max) max = (a->element).ocjena;
  
  return max;
}

float prosjOcjena (atom *glava)
{
  atom *a; 
  int zbroj = 0; 
  int broj = 0;
  
  if (glava == NULL) return -1;
  
  for (a = glava; a != NULL; a = a->sljed) {
      broj++; 
	  zbroj += (a->element).ocjena;
  }
  
  return ((float) zbroj / broj);

}

int izbaciImePocinjeS (atom **glavap, char *imePocetak)
{
 atom *a, *a1; 
 int brojizbacenih = 0;
 char pom[20+1] = {'\0'}, pom1[20+1] = {'\0'};
 
 for (a = *glavap; a != NULL; ) {
 
     strncpy (pom, (a->element).ime, strlen(imePocetak));

	 if (!strcmp (pom, imePocetak)) {
         
         if (a == *glavap) {
               a1 = (*glavap)->sljed;
               free (*glavap);
		       *glavap = a1;
		       a = a1;
		       brojizbacenih++;
         }
         
          else {		   
		       for (a1 = *glavap; a1->sljed != a; a1 = a1->sljed);
		       a1->sljed = a->sljed;
		       free (a);
		       a = a1->sljed;
		       brojizbacenih++;
          }
     }
     
     else a = a->sljed;
	 strncpy (pom, pom1, strlen(imePocetak));
 }

 return brojizbacenih;
}
