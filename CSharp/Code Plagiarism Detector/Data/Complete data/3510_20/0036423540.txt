typedef struct {
      char ime[20+1];
      char prezime[30+1];
      char jmbag[10+1];
      int  ocjena;
} tip;

struct at{
		tip element;
		struct at* sljed;
	};

typedef struct at atom;

int brojElementa(atom *glava){
	atom* pom= glava;
	int brojac=0;

	while(pom!=NULL){
		pom=pom->sljed;
		brojac++;
	}
return brojac;
}

int dodaj (atom **glavap, tip element){
	atom *novi;

	if (novi= (atom *) (malloc (sizeof(atom)))){
		novi->element=element;
		novi->sljed= *glavap;
		*glavap=novi;
		return 1;
	}
	return 0;
}

int maksOcjena(atom *glava){
	atom* pom= glava;
	int max;

	if (glava==NULL) return -1; else max=glava->element.ocjena;

	while(pom->sljed!=NULL){
		pom=pom->sljed;
		if (pom->element.ocjena>max) max=pom->element.ocjena;
	}
return max;
}

float prosjOcjena(atom *glava){
	atom* pom= glava;
	int suma, brElem;
	
	if (glava==NULL) return -1;
	suma=0;brElem=0;
	while(pom!=NULL){
		suma+=pom->element.ocjena;
		brElem++;
		pom=pom->sljed;
	}

return ((float) suma)/brElem;
}

int izbaciImePocinjeS(atom **glavap, char *imePocetak){
	atom *prije=NULL;
	atom *sad=*glavap;
	atom *temp;
	int izb=0;

	while (sad!=NULL){
		if (!(strstr(sad->element.ime, imePocetak)-sad->element.ime)){
			temp=sad;
			if (prije!=NULL){
				prije->sljed=sad->sljed;
			}
			if (*glavap==sad) *glavap=sad->sljed;
			sad=sad->sljed;
			free(temp);
			izb++;
		}
		else{
			prije=sad;
			sad=sad->sljed;
		}
	
	}
return izb;
}