typedef struct
{
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

struct at
{
	tip el;
	struct atm *sljed;
};

typedef struct atm atom;

int brojElementa(atom *glava)
{
	int n = 0;
	atom *pom = glava;
	while (pom != NULL)
	{
		n++;
		pom = pom->sljed;
	}
	return n;
}

int dodaj(atom **glavap, tip element)
{
	atom *novi = (atom*) malloc(sizeof(atom));
	if (novi == NULL)
		return 0;
	strcpy(novi->element.ime, element.ime);
	strcpy(novi->element.prezime, element.prezime);
	strcpy(novi->element.jmbag, element.jmbag);
	novi->element.ocjena = element.ocjena;
	novi->sljed = *glavap;
	*glavap = novi;
	return 1;
}

int maksOcjena(atom *glava)
{
	int max = -1;
	atom *pom = glava;
	while (pom != NULL)
	{
		if (pom->element.ocjena > max)
			max = pom->element.ocjena;
		pom = pom->sljed;
	}
	return max;
}

float prosjOcjena(atom *glava)
{
	int uk = 0, n = 0;
	atom *pom = glava;
	if (pom == NULL)
		return -1.0f;
	while (pom != NULL)
	{
		n++;
		uk += pom->element.ocjena;
		pom = pom->sljed;
	}
	return (float) uk/n;
}

int izbaciImePocinjeS(atom **glavap, char *imePocetak)
{
	int n = 0;
	atom *pom = *glavap, *preth = NULL;
	while (pom != NULL)
	{
		if (strncmp(pom->element.ime, imePocetak, strlen(imePocetak)) == 0)
		{
			if (*glavap == pom)
			{
				*glavap = pom->sljed;
				free(pom);
				pom = *glavap;
			}
			else
			{
				preth->sljed = pom->sljed;
				free(pom);
				pom = preth->sljed;
			}
			n++;
		}
		else
		{
			preth = pom;
			pom = pom->sljed;
		}
	}
	return n;
}
