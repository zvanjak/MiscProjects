typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

typedef struct at {
	tip elem;
	struct at *sljed;
} atom;

int brojElementa(atom *glava)
{
	int br = 0;

	while(glava != NULL) {
		br++;
		glava = glava->sljed;
	}

	return br;
}

int dodaj(atom **glavap, tip element)
{
	atom *novi;

	if((novi = (atom*) malloc(sizeof(atom))) == NULL) return 0;

	novi->elem = element;
	novi->sljed = *glavap;
	*glavap = novi;

	return 1;
}

int maksOcjena(atom *glava)
{
	int max = -1;

	while(glava != NULL) 
	{
		if(glava->elem.ocjena > max)
			max = glava->elem.ocjena;
	
		glava = glava->sljed;
	}

	return max;
}

float prosjOcjena(atom *glava)
{
	int suma = 0;
	int br = 0;

	while(glava != NULL)
	{
		suma += glava->elem.ocjena;
		br++;
		glava = glava->sljed;
	}

	if(br == 0)
		return -1;
	else
		return ((float) suma) / ((float) br);
}

int izbaciImePocinjeS(atom **glavap, char *imePocetak)
{
	int br = 0;
	atom *glava;

	if(*glavap == NULL) return 0;

	glava = *glavap;

	while(glava->sljed != NULL)
		if(strstr(glava->sljed->elem.ime, imePocetak) == glava->sljed->elem.ime)
		{
			atom *stari = glava->sljed;
			glava->sljed = glava->sljed->sljed;
			free(stari);
			br++;
		} 
		else 
		{
			glava = glava->sljed;
		}

	if(strstr((*glavap)->elem.ime, imePocetak) == (*glavap)->elem.ime)
	{
		atom *stari = *glavap;
		*glavap = (*glavap)->sljed;
		free(stari);
		br++;
	}

	return br;	
}
