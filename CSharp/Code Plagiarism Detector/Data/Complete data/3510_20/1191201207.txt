typedef struct{
        char ime[20+1];
        char prezime[30+1];
        char jmbag[10+1];
        int ocjena;
        }tip;

typedef struct at{
		tip element;
		struct at *sljed;
	    }atom;

int brojElementa(atom *glava)
{
	int i=0;
		while(glava)
		   {
		    i++;
			glava=glava->sljed;
		    }
		return i;
}

int dodaj(atom **glavap, tip element)
{
	atom *novi, *pom;
	novi=(atom*)malloc(sizeof(atom));
	if(!novi)
		return 0;
	else{
		novi->element=element;
			if(*glavap==NULL||(*glavap)->element.ocjena>=element.ocjena)
			{
				novi->sljed=*glavap;
				*glavap=novi;
			}
			else
			{
				pom=*glavap;
				while ((pom->sljed) && (pom->sljed)->element.jmbag[0]<=element.jmbag[0])
					pom=pom->sljed;
						
			novi->sljed=pom->sljed;
			pom->sljed=novi;
			}
		return 1;
		}
}
int maksOcjena(atom *glava)
{
	int max=0;
	if(glava==NULL)
		return -1;
	while(glava)
	{	if(max<glava->element.ocjena)
			max=glava->element.ocjena;
		glava=glava->sljed;
	}
	return max;		
}
float prosjOcjena(atom *glava)
{
	float suma=0;
	int i=0;

	if(glava==NULL)
		return -1;
	while(glava)
	{
		suma+=glava->element.ocjena;
		i++;
		glava=glava->sljed;
	}
	return (suma/i);

}
int izbaciImePocinjeS(atom **glavap, char *imePocetak)
{
	atom *pom;
	int broj=0,i=0;

	if(*glavap)
	{
		broj=izbaciImePocinjeS(&((*glavap)->sljed),imePocetak);
		 while(1)
		{
            if(imePocetak[i]=='\0')
				{	
					pom=*glavap;
					*glavap=(*glavap)->sljed;
					free(pom);
					broj++; 
					break;
				}			
			if((*glavap)->element.ime[i]!=imePocetak[i])
				break;                      
             i++ ;              
		}
		return broj;
	}
	else return 0;
}