typedef struct 
{
    char ime[20+1];
    char prezime[30+1];
    char jmbag[10+1];
    int ocjena;
} tip;

typedef struct a
{
    tip element;
    struct a *sljed;
} atom;

int brojElementa(atom *glava)
{
    int broj=0;

    while( glava != NULL )
    {
        ++broj;
        glava = glava->sljed;
    }

    return broj;
}

int dodaj (atom **glavap, tip element)
{
    atom *novi;

    novi = (atom*)malloc( sizeof(atom) );

    if( novi == NULL )
        return 0;

    novi->element = element;
    novi->sljed = *glavap;
    *glavap = novi;

    return 1;
}
  
 
 
int maksOcjena(atom *glava)
{
    int max;

    if( glava == NULL )
        return -1;

    max = glava->element.ocjena;
    glava = glava->sljed;

    while( glava != NULL )
    {
        if( glava->element.ocjena > max )
            max = glava->element.ocjena;
        glava = glava->sljed;
    }

    return max;
}
  
  
  
float prosjOcjena(atom *glava)
{
    int suma=0, broj=0;

    if( glava == NULL )
        return -1;


    while( glava != NULL )
    {
        suma += glava->element.ocjena;
        ++broj;
        glava = glava->sljed;
    }

    return (float)suma/broj;
}

int pocinjena( char *str, char *zadani )
{
    int i;

    for( i=0; zadani[i]!='\0' ; i++ )
        if( str[i] != zadani[i] )
            return 0;

    return 1;
}

int izbaciPrezimePocinjeS (atom **glavap, char * prezimePocetak)
{
    int broj=0;
    atom *p, *prethodni;

    while( (*glavap!=NULL) && pocinjena( (*glavap)->element.prezime, prezimePocetak ) )
    {
        ++broj;
        p = *glavap;
        *glavap = (*glavap)->sljed;
        free( p );
    }

    prethodni = *glavap;

    while( (prethodni!=NULL) && (prethodni->sljed!=NULL) )
    {
        if( pocinjena( prethodni->sljed->element.prezime, prezimePocetak )  )
        {
            ++broj;
            p = prethodni->sljed;
            prethodni->sljed = prethodni->sljed->sljed;
            free( p );
        }
        else
            prethodni = prethodni->sljed;
    }

    return broj;
}
  
 