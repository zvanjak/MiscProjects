typedef struct
{
        char ime [20+1];
        char prezime [30+1];
        char jmbag [10+1];
        int  ocjena;
} tip;

typedef struct ats
{
        tip element;
        struct ats* sljed;
} atom;

int dodaj(atom **glavap, tip element)
{
    atom *temp;
    if (*glavap == NULL)
    {
        *glavap = (atom*) malloc(sizeof(atom));
        if (*glavap == NULL) return 0;
    }
    else
    {
        temp = (atom*) malloc(sizeof(atom));
        if (temp == NULL) return 0;
        temp->sljed = *glavap;
        *glavap = temp;
    }
    (*glavap)->element = element;
    return 1;
}

int brojElementa(atom *glava)
{
    int broj=0;
    if (glava == NULL) return 0;
    broj++;
    while(glava->sljed)
    {
        glava = glava->sljed;
        broj++;
    }
    return broj;
}
    
int maksOcjena(atom *glava)
{
    int max=-1;
    if (glava != NULL)
    {
        max = glava->element.ocjena;
        while(glava->sljed)
        {
            glava = glava->sljed;
            if (max < glava->element.ocjena) max = glava->element.ocjena;
        }
    }
    return max;
}
    
float prosjOcjena(atom *glava)
{
    float pros=-1;
    int broj=0;
    if (glava != NULL)
    {
        pros = (float) glava->element.ocjena;
        broj++;
        while(glava->sljed)
        {
            glava = glava->sljed;
            pros += (float) glava->element.ocjena;
            broj++;
        }
        pros /= broj;
    }
    return pros;
}
    
int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak)
{
    int broj=0, izbaceni=0, i;
    char *pom;
    atom *prethodni=NULL, *glava, *temp;
    glava = *glavap;
    if (glava != NULL)
    {
        broj = strlen(prezimePocetak);
        pom = (char*) malloc((broj+1) * sizeof(char));
        do
        {
            strncpy(pom, glava->element.prezime, broj);
            if (!(strcmp(pom, prezimePocetak)))
            {
                temp = glava;
                glava = glava->sljed;
                if (prethodni != NULL)
                    prethodni->sljed = glava;
                else
                    *glavap = glava;
                free(temp);
                izbaceni++;
            }
            else
            {
                prethodni = glava;
                glava = glava->sljed;
            }
        } while(glava);
    }
    return izbaceni;
}
