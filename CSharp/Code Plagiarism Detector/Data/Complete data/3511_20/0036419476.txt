typedef struct 
{
   char ime [20 + 1];
   char prezime [30 + 1];
   char jmbag [10 + 1];
   int ocjena;
} tip;
  
typedef struct lista 
{
   tip element;
   struct lista *sljed;
} atom;
  
int brojElementa (atom *glava)
{
   atom *elem; 
   int brojElem = 0;
   for (elem = glava; elem != NULL; elem = elem->sljed) 
      brojElem++;
   return brojElem;
}
  
int dodaj (atom **glavap, tip element)
{
   atom *novi;
   if ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
   	  return 0;
   strcpy ((novi->element).ime, element.ime);
   strcpy ((novi->element).prezime, element.prezime);
   strcpy ((novi->element).jmbag, element.jmbag);
   (novi->element).ocjena = element.ocjena;
   novi->sljed = *glavap;
   *glavap = novi;
   return 1;
}
    
int maksOcjena (atom *glava)
{
   atom *pom; 
   int max = 0;
   if (glava == NULL) 
   	  return -1;
   max = (glava->element).ocjena;
   for (pom = glava; pom != NULL; pom = pom->sljed)
      if ((pom->element).ocjena > max) 
      	 max = (pom->element).ocjena;
   return max;
}
  
  
float prosjOcjena (atom *glava)
{
   atom *pom; 
   int zbroj = 0; 
   int cnt = 0;
   if (glava == NULL) 
   	  return -1;
   for (pom = glava; pom != NULL; pom = pom->sljed) 
   {
      cnt++; 
      zbroj += (pom->element).ocjena;
   }
   return ((float) zbroj / cnt);
}
   
int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak)
{
   atom *pom, *pom2; 
   int cnt = 0;
   
   for (pom = *glavap; pom != NULL; ) 
   {
      if (strstr ((pom->element).prezime, prezimePocetak)==(pom->element).prezime) 
      {
         if (pom == *glavap) 
         {
            pom2 = (*glavap)->sljed;
            free (*glavap);
            *glavap = pom2;
            pom = pom2;
            cnt++;
         }
         else 
         {
            for (pom2 = *glavap; pom2->sljed != pom; pom2 = pom2->sljed);
            pom2->sljed = pom->sljed;
            free (pom);
            pom = pom2->sljed;
            cnt++;
         }
      }
      else 
      	 pom = pom->sljed;
   }
   return cnt;
}  