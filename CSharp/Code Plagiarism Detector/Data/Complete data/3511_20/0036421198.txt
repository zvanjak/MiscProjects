typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct n {
        tip element;
        struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
  atom *pom;
  
  if ((pom = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  
  strcpy ((pom->element).ime, element.ime);
  strcpy ((pom->element).prezime, element.prezime);
  strcpy ((pom->element).jmbag, element.jmbag);
  (pom->element).ocjena = element.ocjena;
  
  pom->sljed = *glavap;
  *glavap = pom;
  
  return 1;
}

int brojElementa (atom *glava)
{
  atom *pom; 
  int br = 0;
  for (pom = glava; pom != NULL; pom = pom->sljed) br++;
  
  return br;
}

int maksOcjena (atom *glava)
{
  atom *pom; int max;
  
  if (glava == NULL) return -1;
  
  max = (glava->element).ocjena;
  for (pom = glava; pom != NULL; pom = pom->sljed) 
      if ((pom->element).ocjena > max) max = (pom->element).ocjena;
  
  return max;
}

float prosjOcjena (atom *glava)
{
  atom *pom; 
  int z = 0; 
  int br = 0;
  
  if (glava == NULL) return -1;
  
  for (pom = glava; pom != NULL; pom = pom->sljed) {
      br++; z += (pom->element).ocjena;
  }
  
  return ((float) z / br);

}

int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak)
{
 atom *pom1, *pom2; int num = 0;
 
 for (pom1 = *glavap; pom1 != NULL; ) {
 
     if ((strncmp ((pom1->element).prezime, prezimePocetak, strlen (prezimePocetak)) == 0) &&
         (strlen ((pom1->element).prezime) >= strlen (prezimePocetak))) {
         
         if (pom1 == *glavap) {
               pom2 = (*glavap)->sljed;
               free (*glavap);
		       *glavap = pom2;
		       pom1 = pom2;
		       num++;
         }
         
          else {		   
		       for (pom2 = *glavap; pom2->sljed != pom1; pom2 = pom2->sljed);
		       pom2->sljed = pom1->sljed;
		       free (pom1);
		       pom1 = pom2->sljed;
		       num++;
          }
     }
     
     else pom1 = pom1->sljed;
 }

 return num;
} 
       
               