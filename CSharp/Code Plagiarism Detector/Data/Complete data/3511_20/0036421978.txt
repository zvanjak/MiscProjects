typedef struct{
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
}tip;

typedef struct at{
	tip element;
	struct at *sljed;
}atom;

int dodaj(atom **glavap, tip element){
	atom *novi;
	if((novi=(atom*)malloc(sizeof(atom))) == NULL) return 0;
	strcpy((novi->element).ime,element.ime);
	strcpy((novi->element).prezime,element.prezime);
	strcpy((novi->element).jmbag,element.jmbag);
	(novi->element).ocjena=element.ocjena;

	novi->sljed=*glavap;
	*glavap=novi;
	return 1;
}

int brojElementa(atom *glava){
	atom *pom;
	int br=0;
	for(pom=glava; pom!=NULL; pom=pom->sljed)
		br++;
	return br;
}

int maksOcjena(atom *glava){
	int max;
	atom *pom;
	if(glava==NULL) return -1;
	max=(glava->element).ocjena;
	for(pom=glava; pom!=NULL; pom=pom->sljed){
		if ((pom->element).ocjena> max)
			max=(pom->element).ocjena;
	}
	return max;
}

float prosjOcjena (atom *glava)
{
  atom *p; int zbroj = 0; int num = 0;
  
  if (glava == NULL) return -1;
  
  for (p = glava; p != NULL; p = p->sljed) {
      num++; zbroj += (p->element).ocjena;
  }
  
  return ((float) zbroj / num);

}


int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
	int br=0;
	atom *p, *pp;
	for(p=*glavap; p!=NULL; p=p->sljed){
		if ((strcmp((p->element).prezime,prezimePocetak)==0) && (strlen((p->element).prezime)>=strlen(prezimePocetak))){

			if (p==*glavap){
				pp=(*glavap)->sljed;
				free (*glavap);
				*glavap=pp;
				p=pp;
				br++;
			}
			else{
				for (pp=*glavap; pp->sljed!=p; pp=pp->sljed);
				pp->sljed=p->sljed;
				free (p);
				p=pp->sljed;
				br++;
			}
		}
		else p=p->sljed;
	}
	return br;
}


