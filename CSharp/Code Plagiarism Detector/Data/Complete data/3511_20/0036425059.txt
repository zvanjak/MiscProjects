typedef struct {
        char ime[20+1];
        char prezime[30+1];
        char jmbag[10+1];
        int ocjena;
} tip;

typedef struct at{
        tip element;
        struct at *sljed;
        } atom;
        
int brojElementa(atom *glava){
    int brojac=0;
    atom *p;
    for (p=glava;p!= NULL; p= p->sljed)
    brojac++;
    return brojac;
}

int dodaj (atom **glavap, tip element){
    atom *novi;
    if ((novi=(atom*)malloc(sizeof(atom)))== NULL)
    return 0;
    
    strcpy ((novi->element).ime, element.ime);
    strcpy ((novi->element).prezime, element.prezime);
    strcpy ((novi->element).jmbag, element.jmbag);
    (novi->element).ocjena=element.ocjena;
    
    novi->sljed=*glavap;
    *glavap=novi;
    return 1;
}

int maksOcjena (atom *glava){
    int max;
    atom *a;
    if (glava==NULL) return -1;
    max= (glava->element).ocjena;
    for (a=glava; a!= NULL; a=a->sljed)
        if ((a->element).ocjena > max) 
           max=(a->element).ocjena;
        
    return max;
}

float prosjOcjena (atom *glava){
      int suma=0;
      int brojac=0;
      atom *p;
      if (glava==NULL) return -1;
      for (p=glava; p!= NULL; p=p->sljed){
          suma+=(p->element).ocjena;
          brojac++;
          }
      return ((float) suma/brojac);
}

int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
    int broj=0;
    atom *p, *pp;
    for (p= *glavap;p!=NULL;){
        if (strstr((p->element).prezime, prezimePocetak)==(p->element).prezime) {
           
           if (p == *glavap) {
              pp = (*glavap)->sljed;
              free (*glavap);
              *glavap = pp;
              p = pp;
              broj++;
           }
           else {
                for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
                pp->sljed = p->sljed;
                free (p);
                p = pp->sljed;
                broj++;
            }
        }
        else p = p->sljed;
    }
    return broj;
}
    
      
          
      
       
      
          
      
    