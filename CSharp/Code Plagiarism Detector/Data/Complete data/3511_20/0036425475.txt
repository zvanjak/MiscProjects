typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;
  
typedef struct n {
tip element;
struct n *sljed;
} atom;
  
int dodaj (atom **glavap, tip element)
{
atom *novi;
if ((novi=(atom *) malloc(sizeof(atom))) == NULL) return 0;
strcpy ((novi->element).ime, element.ime);
strcpy ((novi->element).prezime, element.prezime);
strcpy ((novi->element).jmbag, element.jmbag);
(novi->element).ocjena = element.ocjena;
novi->sljed=*glavap;
*glavap=novi;
return 1;
}
  
int brojElementa (atom *glava)
{
atom *p; int brel=0;
for (p=glava; p != NULL; p=p->sljed) brel++;
return brel;
}
  
int maksOcjena (atom *glava)
{
atom *p; int maxOcj;
if (glava == NULL) return -1;
maxOcj=(glava->element).ocjena;
for (p=glava; p != NULL; p=p->sljed)
if ((p->element).ocjena > maxOcj) maxOcj=(p->element).ocjena;
return maxOcj;
}
  
float prosjOcjena (atom *glava)
{
atom *p; 
int zbroj=0; 
int br=0;
if (glava==NULL) return -1;
for (p=glava; p != NULL; p=p->sljed) {
br++; 
zbroj=zbroj+((p->element).ocjena);
}
return ((float) zbroj/br);
}
int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
atom *p, *pok; int br=0;
for (p = *glavap; p != NULL; ) {
if (strstr ((p->element).prezime, prezimePocetak)==(p->element).prezime) {
if (p==*glavap) {
pok=(*glavap)->sljed;
free (*glavap);
*glavap=pok;
p=pok;
br++;
}
else {
for (pok=*glavap; pok->sljed != p; pok=pok->sljed);
pok->sljed=p->sljed;
free (p);
p=pok->sljed;
br++;
}
}
else p=p->sljed;
}
return br;
}