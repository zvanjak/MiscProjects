typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
	} tip;
	
struct at {
  tip element;
  struct at *sljed; 
};

typedef struct at atom;


int brojElementa (atom *glava) {
	atom *p;
	int br=0;
	for (p = glava; p != NULL; p = p->sljed)
		br++;
	return br;
	}
	

int dodaj (atom **glavap, tip element) {
	atom *novi;
	if( (novi= (atom*) malloc(sizeof(atom)))==NULL)
		return 0;
	
	novi->element= element;
	novi->sljed= *glavap;
	*glavap= novi;
	return 1;
	}
	
int maksOcjena (atom *glava) {
	atom *p;
	int max=-1;
	for (p = glava; p != NULL; p = p->sljed) {
		if((p->element).ocjena > max)
			max= (p->element).ocjena;
		}
	return max;
	}
	
float prosjOcjena (atom *glava) {
	atom *p;
	float s=0;
	int br=0;
	if(glava==NULL) return -1;
	
	for (p = glava; p != NULL; p = p->sljed) {
		s+= (p->element).ocjena;
		br++;
		}
	s/=br;
	return s;
	}

	
int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak) {	
	atom *p, *pp;
	int br = 0;	
	for (p = *glavap; p != NULL; ) {
		if (strncmp( (*glavap)->element.prezime, prezimePocetak, strlen(prezimePocetak) )== 0) {
			if (p == *glavap) {
				pp = (*glavap)->sljed;
				free (*glavap);
				*glavap = pp;
				p = pp;
				br++;
				}
			else {
				for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
				pp->sljed = p->sljed;
				free (p);
				p = pp->sljed;
				br++;
				}
		}			
		else p = p->sljed;
	}
	return br;
	}