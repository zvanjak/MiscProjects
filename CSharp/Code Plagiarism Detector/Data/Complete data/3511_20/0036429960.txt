typedef struct {
char ime [20 + 1];
char prezime [30 + 1];
char jmbag [10 + 1];
int ocjena;
} tip;

typedef struct n {
tip element;
struct n *sljed;
} atom;


int dodaj (atom **glavap, tip element)
{
atom *nov;
if ((nov = (atom *) malloc(sizeof(atom))) == NULL) return 0;
strcpy((nov->element).ime, element.ime);
strcpy((nov->element).prezime, element.prezime);
strcpy((nov->element).jmbag, element.jmbag);
(nov->element).ocjena = element.ocjena;
nov->sljed = *glavap;
*glavap = nov;
return 1;
}

int brojElementa (atom *glava)
{
atom *pa; int NumerEle = 0;
for (pa = glava; pa != NULL; pa = pa->sljed) NumerEle++;
return NumerEle;
}

int maksOcjena (atom *glava)
{
atom *pa; int maksi;
if (glava == NULL) return -1;
maksi = (glava->element).ocjena;
for (pa = glava; pa != NULL; pa = pa->sljed)
if ((pa->element).ocjena > maksi) 
maksi = (pa->element).ocjena;
return maksi;
}

float prosjOcjena (atom *glava)
{
atom *pa; int zbroj = 0; int numer = 0;
if (glava == NULL) return -1;
for (pa = glava; pa != NULL; pa = pa->sljed) {
numer++; zbroj += (pa->element).ocjena;
}
return ((float) zbroj / numer);
}

int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
   atom *p, *pp; int num = 0;
   for (p = *glavap; p != NULL; ) {
       if (strstr ((p->element).prezime, prezimePocetak)==(p->element).prezime) {
           if (p == *glavap) {
               pp = (*glavap)->sljed;
               free (*glavap);
               *glavap = pp;
               p = pp;
               num++;
               }
           else {
               for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
               pp->sljed = p->sljed;
               free (p);
               p = pp->sljed;
               num++;
               }
           }
       else p = p->sljed;
       }
   return num;
}