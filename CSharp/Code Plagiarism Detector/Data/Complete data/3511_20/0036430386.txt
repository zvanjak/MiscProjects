   typedef struct {
  char ime [20 + 1];
  char prezime [30 + 1];
  char jmbag [10 + 1];
  int ocjena;
  } tip;
  
  typedef struct n {
  tip element;
  struct n *sljed;
  } atom;
  
  int dodaj (atom **glavap, tip element)
  {
  atom *novi;
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  novi->sljed = *glavap;
  *glavap = novi;
  return 1;
  }
  
  int brojElementa (atom *glava)
  {
  atom *p; int NumEle = 0;
  for (p = glava; p != NULL; p = p->sljed) NumEle++;
  return NumEle;
  }
  
  int maksOcjena (atom *glava)
  {
  atom *p; int max;
  if (glava == NULL) return -1;
  max = (glava->element).ocjena;
  for (p = glava; p != NULL; p = p->sljed)
  if ((p->element).ocjena > max) max = (p->element).ocjena;
  return max;
  }
  
  float prosjOcjena (atom *glava)
  {
  atom *p; int zbroj = 0; int num = 0;
  if (glava == NULL) return -1;
  for (p = glava; p != NULL; p = p->sljed) {
  num++; zbroj += (p->element).ocjena;
  }
  return ((float) zbroj / num);
  }
  
  
  int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
     atom *p, *pp; int num = 0;
     for (p = *glavap; p != NULL; ) {
         if (strstr ((p->element).prezime, prezimePocetak)==(p->element).prezime) {
             if (p == *glavap) {
                 pp = (*glavap)->sljed;
                 free (*glavap);
                 *glavap = pp;
                 p = pp;
                 num++;
                 }
             else {
                 for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
                 pp->sljed = p->sljed;
                 free (p);
                 p = pp->sljed;
                 num++;
                 }
             }
         else p = p->sljed;
         }
     return num;
  }