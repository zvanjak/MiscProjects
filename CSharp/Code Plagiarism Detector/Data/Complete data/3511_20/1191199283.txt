typedef struct {
	char ime[10+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

struct atom {
        tip element;
        struct atom *sljed;
        };



int brojElementa(atom *glava) {
	int brElem=0;
	
	while(glava) {
		glava=glava->sljed;
		brElem++;
	}

	return brElem;
}

int dodaj (atom **glavap, tip element) {
	atom *novi;
	
	if ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
		return 0;
		
	strcpy(novi->element.ime, element.ime);
	strcpy(novi->element.prezime, element.prezime);
	strcpy(novi->element.jmbag, element.jmbag);
	novi->element.ocjena = element.ocjena;
	
	novi->sljed = *glavap;
	*glavap = novi;
	
	return 1;
}

int maksOcjena(atom *glava) {
	int max=0;

	if(glava == NULL)
		return -1;

	while(glava) {
		if(max < glava->element.ocjena)
			max = glava->element.ocjena;
		glava=glava->sljed;
	}
	
	return max;	
}

float prosjOcjena(atom *glava) {
	int ukupno=0; 
	int brElem=0;
	atom *tmp;
	
	tmp=glava;
	
	if(tmp == NULL)
		return -1;

	while(tmp) {
		ukupno += tmp->element.ocjena;
		brElem++;
		tmp=tmp->sljed;
	}
	
	return (float)ukupno/brElem;
}

int pocinjeSa(char *prezime, char *pocinje) {
	int i;
	
	for(i=0; i<strlen(pocinje); i++) {
		if(prezime[i] != pocinje[i])
			return 0;
	}
	
	return 1;
}

int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak) {
	atom *p, *pp;
	int brElem=0;
	
	for (p = *glavap; p != NULL; ) {
		if (pocinjeSa(p->element.prezime, prezimePocetak)) {
			if (p == *glavap) {
				pp = (*glavap)->sljed;
				free (*glavap);
				*glavap = pp;
				p = pp;
				brElem++;
			} else {
				for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
				pp->sljed = p->sljed;
				free (p);
				p = pp->sljed;
				brElem++;
			}
		} else {
			p = p->sljed;
		}
	}
	
	return brElem;
}


