typedef struct {
        char ime [20 + 1];
        char prezime [30 + 1];
        char jmbag [10 + 1];
        int ocjena;
} tip;

typedef struct n {
        tip element;
        struct n *sljed;
} atom;

int dodaj (atom **glavap, tip element)
{
  atom *novi;
  
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) return 0;
  
  strcpy ((novi->element).ime, element.ime);
  strcpy ((novi->element).prezime, element.prezime);
  strcpy ((novi->element).jmbag, element.jmbag);
  (novi->element).ocjena = element.ocjena;
  
  novi->sljed = *glavap;
  *glavap = novi;
  
  return 1;
}

int brojElementa (atom *glava)
{
  atom *k; int brojEle = 0;
  for (k = glava; k != NULL; k = k->sljed) brojEle++;
  
  return brojEle;
}

int minOcjena (atom *glava)
{
  atom *k; int min;
  
  if (glava == NULL) return -1;
  
  min = (glava->element).ocjena;
  for (k = glava; k != NULL; k = k->sljed) 
      if ((k->element).ocjena < min) min = (k->element).ocjena;
  
  return min;
}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz)
{
 atom *k, *polje; int br = 0;
 
 for (k = *glavap; k != NULL; ) {
 
     if (strstr ((k->element).prezime, prezimePodniz)) {
         
         if (k == *glavap) {
               polje = (*glavap)->sljed;
               free (*glavap);
       *glavap = polje;
       k = polje;
       br++;
         }
         
          else {   
       for (polje = *glavap; polje->sljed != k; polje = polje->sljed);
       polje->sljed = k->sljed;
       free (k);
       k = polje->sljed;
       br++;
          }
     }
     
     else k = k->sljed;
 }

 return br;
} 

int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak)
{
 atom *k, *polje; int br = 0;
 
 for (k = *glavap; k != NULL; ) {
 
     if ((strncmp ((k->element).prezime, prezimePocetak, strlen (prezimePocetak)) == 0) &&
         (strlen ((k->element).prezime) >= strlen (prezimePocetak))) {
         
         if (k == *glavap) {
               polje = (*glavap)->sljed;
               free (*glavap);
       *glavap = polje;
       k = polje;
       br++;
         }
         
          else {   
       for (polje = *glavap; polje->sljed != k; polje = polje->sljed);
       polje->sljed = k->sljed;
       free (k);
       k = polje->sljed;
       br++;
          }
     }
     
     else k = k->sljed;
}

return br;
}
