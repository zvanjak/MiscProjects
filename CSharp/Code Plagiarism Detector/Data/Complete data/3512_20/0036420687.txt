typedef struct {
char ime[20+1];
char prezime[30+1];
char jmbag[10+1];
int ocjena;
} tip;

struct z {
tip element;
struct z *sljed;
};
typedef struct z atom;

int brojElementa(atom *glava){
if(!glava) return 0;
return brojElementa(glava->sljed)+1;
}

int dodaj(atom **glavap, tip element){
atom* novi;
if((novi=(atom *) malloc(sizeof(atom)))== NULL)
return 0;
novi->element = element; 
novi->sljed = *glavap;
*glavap = novi;
return 1;
}

int minOcjena (atom *glava){
atom* p; int min;
if (!glava) return -1;
min = glava->element.ocjena;
for(p = glava; p ; p=p->sljed)
min= p->element.ocjena < min ? p->element.ocjena : min ;
return min ;
}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz)
{
 atom *p, *pp; int num = 0;
 
 for (p = *glavap; p != NULL; ) {
 
     if (strstr ((p->element).prezime, prezimePodniz)) {
         
         if (p == *glavap) {
               pp = (*glavap)->sljed;
               free (*glavap);
       *glavap = pp;
       p = pp;
       num++;
         }
         
          else {   
       for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
       pp->sljed = p->sljed;
       free (p);
       p = pp->sljed;
       num++;
          }
     }
     
     else p = p->sljed;
 }

 return num;
} 

int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak)
{
 atom *p, *pp; int num = 0;
 
 for (p = *glavap; p != NULL; ) {
 
     if ((strncmp ((p->element).prezime, prezimePocetak, strlen (prezimePocetak)) == 0) &&
         (strlen ((p->element).prezime) >= strlen (prezimePocetak))) {
         
         if (p == *glavap) {
               pp = (*glavap)->sljed;
               free (*glavap);
       *glavap = pp;
       p = pp;
       num++;
         }
         
          else {   
       for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
       pp->sljed = p->sljed;
       free (p);
       p = pp->sljed;
       num++;
          }
     }
     
     else p = p->sljed;
}

return num;
}