typedef struct{
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;
struct at{
	tip element;
	struct at *sljed;
};
typedef struct at atom;
int dodaj(atom **glavap,tip element){
	atom *novi;
	if((novi=(atom*) malloc(sizeof(atom)))==NULL)return 0;
	novi->element=element;
	novi->sljed=*glavap;
	*glavap=novi;
	return 1;
}


int brojElementa(atom *glava){
	int br;
	for(br=0;glava!=NULL;glava=glava->sljed,br++);
	return br;
}
int minOcjena(atom *glava){
	int min;
	if(glava==NULL) return -1;
	min=glava->element.ocjena;
	while(glava=glava->sljed)
		if(glava->element.ocjena < min)
			min=glava->element.ocjena;
	return min;
}
int izbaciPrezimePocinjeS(atom **glavap,char *prezimePocetak){
	atom *pom,*stari;
	int br=0;
	pom=*glavap;
	
	while(pom){
		if((strstr(pom->element.prezime, prezimePocetak)==pom->element.prezime)){
			if(pom==*glavap){
			stari=*glavap;
			*glavap=(*glavap)->sljed;
			free(stari);
			}else{
				for(stari=*glavap; stari->sljed !=pom; stari=stari->sljed);
				stari->sljed=pom->sljed;
				free(pom);
				pom=stari;
			}
			br++;
		}
		pom=pom->sljed;
	}
	
	return br;
}


int izbaciPrezimeSadrzi(atom **glavap, char *prezimePodniz){
 atom *pom, *stari; int br = 0;
 
 pom = *glavap;
 while(pom != NULL) {
	 if (strstr ((pom->element).prezime, prezimePodniz)) {
         
         if (pom == *glavap) {
               stari = (*glavap)->sljed;
               free (*glavap);
		       *glavap = stari;
		       pom = stari;
         }
         
          else {		   
		       for (stari = *glavap; stari->sljed != pom; stari = stari->sljed);
		       stari->sljed = pom->sljed;
		       free (pom);
		       pom = stari;
          }
		  br++;
	 }
     
		pom = pom->sljed;
	 
 }

 return br;
}