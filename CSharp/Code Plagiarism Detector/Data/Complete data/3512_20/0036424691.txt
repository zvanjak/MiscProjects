typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;

struct z {
	tip element;
	struct z *sljed;
};
typedef struct z atom;
int brojElemenata(atom *glava){
	if(!glava) return 0;
	return brojElemenata(glava->sljed)+1;
}
int dodaj(atom** glavap, tip element){
	atom* novi;
	if((novi=(atom *) malloc(sizeof(atom)))== NULL)
		return 0;
	novi->element = element; 
        novi->slijed = *glavap;
	*glavap = novi;
	return 1;
}
int minOcjena (atom* glava){
	atom* p; int min;
	if (!glava) return -1;
	min = glava->element.ocjena;
	for(p = glava; p ; p=p->sljed)
		min= p->element.ocjena < min ? p->element.ocjena : min ;
	return min ;
}
int izbaciPrezimePocinjeS (atom **glavap, char* prezimePocetak){
	atom* p, *pp; int n = 0;
	char *pom;

	if (*glavap == NULL) return 0;
	for (p = glavap; p ; p = p->sljed){
		if (((pom = strstr(p->element.prezime, prezimePocetak)) != NULL)&&(pom == prezimePocetak))
		{
			if ( p == *glavap){ // pocetak liste
				pp=(*glavap)->sljed;
				free(*glavap);
				*glavap = pp;
			}   else {
				for ( pp = *glavap ; pp->sljed != p ; pp = pp->sljed) ;
				pp->sljed = p->sljed;
				free (p) ;
			}
			n++ ;
		}// od ifa
	} // od petlje
	return n;
}

int izbaciPrezimeSadrzi (atom **glavap, char* prezimePodniz){
	atom* p, *pp; int n = 0;

	if (*glavap == NULL) return 0; 
	for (p = glavap; p ; p = p->sljed){
		if (strstr(p->element.prezime, prezimePodniz) != NULL){
			if ( p == *glavap){ // ako je nadjen na pocetku liste
				pp=(*glavap)->sljed;
				free(*glavap);
				*glavap = pp;
			}   else {      // negdje u listi
				for ( pp = *glavap ; pp->sljed != p ; pp = pp->sljed) ; //pozicioniranje na 
				pp->sljed = p->sljed;    // prethodni, jel se ovo moze na neki drugi nacin?
				free (p) ;
			}
			n++ ;   // povechanje brojacha izbachenih elemenata
		}// od ifa
	} // od petlje
	return n;
}