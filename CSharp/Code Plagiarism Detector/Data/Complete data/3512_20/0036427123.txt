typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
} tip;
typedef struct x{
	tip element;
	struct x *sljed;
} atom;


int brojElementa(atom *glava) {
	int br=0;
	while (glava){
		br++;
		glava=glava->sljed;
	}
	return br;
}
int dodaj (atom **glavap, tip element){
	atom *novi;
	if ((novi=(atom *)malloc(sizeof(atom)))!=NULL){
		strcpy((novi->element).ime, element.ime);
		strcpy((novi->element).jmbag, element.jmbag);
		strcpy((novi->element).prezime, element.prezime);
		(novi->element).ocjena=element.ocjena;
		novi->sljed=*glavap;
		*glavap=novi;
		return 1;
	}
	else
		return 0;
}
int minOcjena(atom *glava){
	int min=-1;
	while (glava){
		if ((glava->element).ocjena < min) 
			min=glava->element.ocjena;
		glava=glava->sljed;
	}
	return min;
}
int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz) {
	 atom *p, *pp; 
	 int br = 0;
     for (p = *glavap; p != NULL; ) {
         if (strstr ((p->element).prezime, prezimePodniz)!=NULL) {
             if (p == *glavap) {
                 pp = (*glavap)->sljed;
                 free (*glavap);
                 *glavap = pp;
                 p = pp;
                 br++;
                 }
             else {
                 for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
                 pp->sljed = p->sljed;
                 free (p);
                 p = pp->sljed;
                 br++;
                 }
             }
         else p = p->sljed;
         }
     return br;
  }
int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
	atom *p, *pp; 
	int br = 0;
	for (p = *glavap; p != NULL; ) {
		if (strstr ((p->element).prezime, prezimePocetak)==(p->element).prezime) {
			if (p == *glavap) {
				pp = (*glavap)->sljed;
				free (*glavap);
				*glavap = pp;
				p = pp;
				br++;
			}
			else 
			{
				for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
				pp->sljed = p->sljed;
				free (p);
				p = pp->sljed;
				br++;
			}
		}
		else p = p->sljed;
	}
return br;
}