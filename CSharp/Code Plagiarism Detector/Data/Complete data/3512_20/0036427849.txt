typedef struct{
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
}tip;

struct at{
	tip element;
	struct at *sljed;
};

typedef struct at atom;

int brojElementa(atom *glava){
	int br=0;
	for(; glava; br++, glava=glava->sljed);
	return br;
}

int dodaj(atom **glavap, tip element){
	atom *novi;
	
	if ( (novi = (atom*) malloc (sizeof (atom)))==NULL) return 0;
	novi->element=element;
	novi->sljed=*glavap;
	*glavap=novi;

	return 1;
}

int minOcjena(atom *glava){
	int pom;

	if (!glava) return -1;
	pom=minOcjena(glava->sljed);

	if (pom==-1 || (pom > glava->element.ocjena)) 
		return glava->element.ocjena;
	return pom;
}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz){
	atom *stari;

	if (!(*glavap)) return 0;
	if ( strstr((*glavap)->element.prezime, prezimePodniz )){
		stari=(*glavap);
		(*glavap)=stari->sljed;
		free(stari);
		return (1+izbaciPrezimeSadrzi(glavap, prezimePodniz));
	}
	return izbaciPrezimeSadrzi (&(*glavap)->sljed, prezimePodniz);
}

int izbaciPrezimePocinjeS (atom **glavap, char *prezimePocetak){
	atom *stari;
	
	if (!(*glavap)) return 0;
	if ( strncmp((*glavap)->element.prezime, prezimePocetak, strlen(prezimePocetak))==0){
		stari=(*glavap);
		(*glavap)=stari->sljed;
		free(stari);
		return (1+izbaciPrezimePocinjeS(glavap, prezimePocetak));
	}
	return izbaciPrezimePocinjeS (&(*glavap)->sljed, prezimePocetak);
}