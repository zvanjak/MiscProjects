typedef struct {

      char ime[20+1];

      char prezime[30+1];

      char jmbag[10+1];

      int  ocjena;

} tip;

struct atom{
	tip podaci;
	atom *sljed;
};
int brojElementa(atom *glava){
	if (glava == NULL) return 0;
	int i = 0;
	struct atom *pom;
    pom = glava;
	while(pom->sljed != NULL){
		pom = pom->sljed;
		i++;
	}
	i++;
	return i;
}
int dodaj (atom **glavap, tip element){
	atom *novi;
	if ((novi = (atom *)malloc(sizeof(atom))) == NULL) return 0;
	strcpy((novi->podaci).ime, element.ime);
	strcpy((novi->podaci).jmbag, element.jmbag);
	strcpy((novi->podaci).prezime, element.prezime);
	(novi->podaci).ocjena = element.ocjena;
	novi->sljed = *glavap;
	*glavap = novi;
	return 1;
}
int minOcjena(atom *glava){
	atom *pom;
	pom = glava;
	if (glava == NULL) return -1;
	int min;
	min = (pom->podaci).ocjena;
	for (;pom != NULL; pom = pom->sljed){
		if (((pom->podaci).ocjena) < min){
			min = (pom->podaci).ocjena;
		}
	}
	return min;
}
int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz){
	atom *p, *pp;
	int brojac = 0;
	p = *glavap;
	if (p == NULL) return 0;
	for(; p != NULL;){
		if(strstr((p->podaci).prezime, prezimePodniz)){
			if(p == *glavap){
				*glavap = p->sljed;
				free (p);
				p = *glavap;
				brojac ++;
			}else {
				pp->sljed = p->sljed;
				free (p);
				p = pp;
				brojac++;
			}
		}else{
			pp = p;
			p = p->sljed;
		}
	}
	return brojac;
}

int izbaciPrezimePocinjeS (atom **glavap, char * prezimePocetak){
	atom *p, *pp;
	int broj = 0;
	p = *glavap;
	if (p == NULL) return 0;
	for(; p != NULL;){
		if((strstr( (p->podaci).prezime, prezimePocetak)) == (p->podaci).prezime){
			if(p == *glavap){
				*glavap = p->sljed;
				free (p);
				p = *glavap;
				broj ++;
			}else {
				pp->sljed = p->sljed;
				free (p);
				p = pp;
				broj++;
			}
		}else{
			pp = p;
			p = p->sljed;
		}
	}
	return broj;
}