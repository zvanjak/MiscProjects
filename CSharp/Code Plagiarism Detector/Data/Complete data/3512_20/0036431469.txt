typedef struct {
      char ime[20+1];
      char prezime[30+1];
      char jmbag[10+1];
      int  ocjena;
} tip;

typedef struct at atom;
struct at {
	tip element;
	atom *sljed;
};

int brojElementa(atom *glava) {
	int elemenata = 0;
	while (glava) {
		elemenata++;
		glava = glava->sljed;
	}
	return elemenata;
}

int dodaj (atom **glavap, tip element) {
	atom *novi;
	
	novi = (atom *) malloc (sizeof(atom));
	if (novi == NULL) return 0;
	
	novi->element = element;
	novi->sljed = *glavap;
	*glavap = novi;
	
	return 1;
}

int minOcjena(atom *glava) {
	int min;

	if (glava == NULL) return -1;
	
	min = (glava->element).ocjena;
	glava = glava->sljed;
	while (glava) {
		if (min > (glava->element).ocjena) {
			min = (glava->element).ocjena;
		}
		glava = glava->sljed;
	}

	return min;
}

int izbaciPrezimeSadrzi (atom **glavap, char * prezimePodniz){
     atom *p, *pp; int num = 0;
     for (p = *glavap; p != NULL; ) {
         if (strstr ((p->element).prezime, prezimePodniz)!=NULL) {
             if (p == *glavap) {
                 pp = (*glavap)->sljed;
                 free (*glavap);
                 *glavap = pp;
                 p = pp;
                 num++;
                 }
             else {
                 for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
                 pp->sljed = p->sljed;
                 free (p);
                 p = pp->sljed;
                 num++;
                 }
             }
         else p = p->sljed;
         }
     return num;
  }


int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak){
   atom *p, *pp; int num = 0;
   for (p = *glavap; p != NULL; ) {
       if (strstr ((p->element).prezime, prezimePocetak)==(p->element).prezime) {
           if (p == *glavap) {
               pp = (*glavap)->sljed;
               free (*glavap);
               *glavap = pp;
               p = pp;
               num++;
               }
           else {
               for (pp = *glavap; pp->sljed != p; pp = pp->sljed);
               pp->sljed = p->sljed;
               free (p);
               p = pp->sljed;
               num++;
               }
           }
       else p = p->sljed;
       }
   return num;
}
