typedef struct {
	char ime[20+1];
	char prezime[30+1];
	char jmbag[10+1];
	int ocjena;
}tip;

struct at {
	tip podatak;
	struct at *sljed;
};
typedef struct at atom;

int brojElementa(atom *glava)
{
	int brojac=0;
	if(glava==NULL) return brojac;
	while(glava!=NULL)
	{
		brojac++;
		glava=glava->sljed;
	}
	return brojac;
}

int dodaj(atom **glavap, tip element)
{
	atom *novi;
	if((novi=(atom *) malloc (sizeof(atom)))==NULL) return 0;
	novi->podatak=element;
	novi->sljed=*glavap;
	*glavap=novi;
	return 1;
}

int minOcjena(atom *glava)
{
	int min;
	if(glava==NULL) return -1;
	min=glava->podatak.ocjena;
	while((glava->sljed)!=NULL)
	{
		if(glava->podatak.ocjena >(glava->sljed)->podatak.ocjena)
			min=(glava->sljed)->podatak.ocjena;
		glava=glava->sljed;
	}
	return min;
}

int izbaciPrezimeSadrzi(atom **glavap, char *prezimePodniz)
{
	int broj=0,pom=0;
	atom *p,*pp,*prije;
	pp=*glavap;
	prije=*glavap;
	while(pp!=NULL)
	{
		if((strstr(pp->podatak.prezime, prezimePodniz))!=NULL)
		{
			p=pp;
			pom=1;
			prije->sljed=pp->sljed;
			pp=pp->sljed;
			if(p==*glavap) *glavap=p->sljed;
			free(p);
			broj++;
		}
		prije=pp;
		if(!pom)
			pp=pp->sljed;
		pom=0;
	}
	return broj;
}

int izbaciPrezimePocinjeS(atom **glavap, char *prezimePocetak)
{
	int broj=0,pom=0;
	atom *p,*pp,*prije;
	pp=*glavap;
	prije=*glavap;
	while(pp!=NULL)
	{
		if(((strstr(pp->podatak.prezime, prezimePocetak))!=NULL) && ((char *)strstr(pp->podatak.prezime, prezimePocetak))==(char *)&(pp->podatak.prezime))
		{
			p=pp;
			pom=1;
			prije->sljed=pp->sljed;
			pp=pp->sljed;
			if(p==*glavap) *glavap=p->sljed;
			free(p);
			broj++;
		}
		prije=pp;
		if(!pom)
			pp=pp->sljed;
		pom=0;
	}
	return broj;
}
		