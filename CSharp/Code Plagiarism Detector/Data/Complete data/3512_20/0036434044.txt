typedef struct {
      char ime[20+1];
      char prezime[30+1];
      char jmbag[10+1];
      int  ocjena;
} tip;

struct at {
      tip podaci;
      struct at *sljed;  
};

typedef struct at atom;

int brojElementa(atom *glava) {
    int i = 0;
    for (; glava != NULL; glava = glava->sljed) i++;
    return i;
}   

int dodaj(atom **glavap, tip element) {
  atom *novi;
  if ((novi = (atom *) malloc(sizeof(atom))) == NULL) 
		return 0;
		
    strcpy(novi->podaci.ime, element.ime);
    strcpy(novi->podaci.prezime, element.prezime);
    strcpy(novi->podaci.jmbag, element.jmbag);
    novi->podaci.ocjena = element.ocjena;
    
	if (*glavap == NULL) {
		novi->sljed = NULL;
	}
	
    novi->sljed = *glavap;
    *glavap = novi;	
    
  return 1;
}

int minOcjena(atom *glava)  {
    int ocj;
    if (glava == NULL) return (-1); else ocj = glava->podaci.ocjena;
    glava = glava->sljed;
    for (; glava != NULL; glava = glava->sljed) {
		if (ocj > glava->podaci.ocjena) ocj = glava->podaci.ocjena;
    }
    return ocj;
}

int izbaciPrezimeSadrzi (atom **glavap, char *prezimePodniz) {
	atom *p; int broj_izbac = 0;
	while (*glavap) {
  for (; *glavap && (strstr((*glavap)->podaci.prezime, prezimePodniz) == NULL); glavap = &((*glavap)->sljed));
	if (*glavap) {
		p = *glavap;
		*glavap = (*glavap)->sljed;
		free (p);
		broj_izbac++;
		}
	}
  return broj_izbac;
}

int izbaciPrezimePocinjeS (atom **glavap, char * prezimePocetak) {
		atom *p; int broj_izbac = 0; int duljina; 
	while (*glavap) {
		for (; *glavap && (strncmp((*glavap)->podaci.prezime, prezimePocetak, strlen(prezimePocetak)) != 0); glavap = &((*glavap)->sljed));
	if (*glavap) {
		p = *glavap;
		*glavap = (*glavap)->sljed;
		free (p);
		broj_izbac++;
		}
	}
  return broj_izbac;
}

